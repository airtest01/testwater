import requests
import json
import os
from datetime import datetime
import pytz

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ---
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.environ.get('LINE_TARGET_ID')
OPENWEATHER_API_KEY = os.environ.get('OPENWEATHER_API_KEY')
IN_BURI_LAT = 15.02
IN_BURI_LON = 100.34
# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
LAST_FORECAST_FILE = 'last_forecast.txt'
# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ù‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (0.7 = 70%)
RAIN_CONFIDENCE_THRESHOLD = 0.7 
# ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (1 ‡∏ä‡πà‡∏ß‡∏á = 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
# 2 = 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, 3 = 9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
FORECAST_PERIODS_TO_CHECK = 2

def get_weather_forecast():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏ù‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á
    - ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ù‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ù‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πà‡∏≥: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "NO_RAIN"
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None
    """
    if not OPENWEATHER_API_KEY:
        print("OPENWEATHER_API_KEY is not set. Skipping weather check.")
        return None
    
    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={IN_BURI_LAT}&lon={IN_BURI_LON}&appid={OPENWEATHER_API_KEY}&units=metric&lang=th&cnt={FORECAST_PERIODS_TO_CHECK}"
    
    try:
        print(f"Fetching weather data for the next {FORECAST_PERIODS_TO_CHECK * 3} hours...")
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        forecast_data = response.json()

        for forecast in forecast_data.get('list', []):
            weather = forecast.get('weather', [{}])[0]
            pop = forecast.get('pop', 0) # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ù‡∏ô (0-1)

            is_rain_event = str(weather.get('id', '')).startswith('5')
            is_confident = pop >= RAIN_CONFIDENCE_THRESHOLD

            print(f"Checking forecast at {datetime.fromtimestamp(forecast['dt'])}: Weather ID {weather.get('id')}, POP: {pop*100:.0f}%")

            if is_rain_event and is_confident:
                tz_thailand = pytz.timezone('Asia/Bangkok')
                forecast_time_utc = datetime.fromtimestamp(forecast['dt'])
                forecast_time_th = forecast_time_utc.astimezone(tz_thailand)
                
                # --- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° ---
                message = (f"üåßÔ∏è *‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ù‡∏ô‡∏ï‡∏Å (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > {RAIN_CONFIDENCE_THRESHOLD*100:.0f}%)*\n"
                           f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                           f"*‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ‡∏≠.‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ, ‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ*\n\n"
                           f"‚ñ∂Ô∏è *‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:* {weather.get('description', 'N/A')}\n"
                           f"üóìÔ∏è *‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:* {forecast_time_th.strftime('%H:%M ‡∏ô.')} ({forecast_time_th.strftime('%d/%m')})")
                
                print(f"Confident rain predicted! Details: {weather.get('description')} with {pop*100:.0f}% probability.")
                return message

        print(f"No rain predicted with >{RAIN_CONFIDENCE_THRESHOLD*100:.0f}% confidence in the next {FORECAST_PERIODS_TO_CHECK * 3} hours.")
        return "NO_RAIN"

    except (requests.exceptions.RequestException, json.JSONDecodeError, KeyError) as e:
        print(f"An error occurred in get_weather_forecast: {e}")
        return None

def send_line_message(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE"""
    if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_TARGET_ID:
        print("LINE credentials are not set. Cannot send message.")
        return
        
    tz_thailand = pytz.timezone('Asia/Bangkok')
    now_thailand = datetime.now(tz_thailand)
    
    # --- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏° ---
    formatted_datetime = now_thailand.strftime("%d/%m/%Y %H:%M:%S")
    full_message = f"{message}\n‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {formatted_datetime}\n\n‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô"

    url = 'https://api.line.me/v2/bot/message/push'
    headers = {'Content-Type': 'application/json', 'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'}
    payload = {'to': LINE_TARGET_ID, 'messages': [{'type': 'text', 'text': full_message}]}
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        print("LINE message sent successfully!")
    except requests.exceptions.RequestException as e:
        print(f"Error sending LINE message: {e.response.text if e.response else 'No response'}")

def read_last_data(file_path):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    return ''

def write_data(file_path, data):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(data)

def main():
    """‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    last_forecast = read_last_data(LAST_FORECAST_FILE)
    current_forecast = get_weather_forecast()

    if current_forecast is not None and current_forecast != last_forecast:
        print(f"Forecast has changed from '{last_forecast}' to '{current_forecast}'.")
        
        if current_forecast != "NO_RAIN":
            print("Sending LINE notification for new high-confidence rain forecast...")
            send_line_message(current_forecast)
        else:
            print("Forecast changed to 'NO_RAIN' or low confidence. Not sending a notification, just updating status.")

        write_data(LAST_FORECAST_FILE, current_forecast)
    else:
        if current_forecast is None:
            print("Could not retrieve weather forecast. Skipping.")
        else:
            print("Forecast has not changed. No action needed.")

if __name__ == "__main__":
    main()
