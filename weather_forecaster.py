import requests
import json
import os
from datetime import datetime
import pytz

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ---
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.environ.get('LINE_TARGET_ID')
OPENWEATHER_API_KEY = os.environ.get('OPENWEATHER_API_KEY')
IN_BURI_LAT = 15.02
IN_BURI_LON = 100.34
# --- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ---
LAST_FORECAST_ID_FILE = 'last_forecast_id.txt'

# --- üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
# ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
RAIN_CONFIDENCE_THRESHOLD = 0.6  # ‡πÄ‡∏î‡∏¥‡∏° 0.8: ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î‡∏ù‡∏ô 60% ‡∏Å‡πá‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
MIN_RAIN_VOLUME_MM = 0.5         # ‡πÄ‡∏î‡∏¥‡∏° 1.0: ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ù‡∏ô 0.5 ‡∏°‡∏°. ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
CONSECUTIVE_PERIODS_NEEDED = 1   # ‡πÄ‡∏î‡∏¥‡∏° 2:   ‡πÄ‡∏à‡∏≠‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏Ñ‡πà‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (3 ‡∏ä‡∏°.) ‡∏Å‡πá‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡∏¢
FORECAST_PERIODS_TO_CHECK = 4    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (4*3 ‡∏ä‡∏°.)


def get_weather_forecast():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏ù‡∏ô/‡∏û‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    - ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏Ç‡∏≠‡∏á forecast ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "NO_RAIN"
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô None
    """
    if not OPENWEATHER_API_KEY:
        print("OPENWEATHER_API_KEY is not set. Skipping.")
        return None

    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={IN_BURI_LAT}&lon={IN_BURI_LON}&appid={OPENWEATHER_API_KEY}&units=metric&lang=th&cnt={FORECAST_PERIODS_TO_CHECK}"

    try:
        print(f"Fetching weather data for the next {FORECAST_PERIODS_TO_CHECK * 3} hours...")
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        forecast_data = response.json()

        confident_periods = []
        for forecast in forecast_data.get('list', []):
            weather_id = str(forecast.get('weather', [{}])[0].get('id', ''))
            pop = forecast.get('pop', 0)
            rain_volume = forecast.get('rain', {}).get('3h', 0)

            is_rain_or_storm = weather_id.startswith('5') or weather_id.startswith('2')
            is_confident_pop = pop >= RAIN_CONFIDENCE_THRESHOLD
            is_significant_volume = rain_volume >= MIN_RAIN_VOLUME_MM

            print(f"Checking forecast at {datetime.fromtimestamp(forecast['dt'])}: ID {weather_id}, POP: {pop*100:.0f}%, Rain: {rain_volume}mm")

            if is_rain_or_storm and is_confident_pop and is_significant_volume:
                confident_periods.append(forecast)
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ reset list ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
                confident_periods = []

            if len(confident_periods) >= CONSECUTIVE_PERIODS_NEEDED:
                print(f"SUCCESS: Found {len(confident_periods)} consecutive periods of rain/storm meeting criteria.")
                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ object ‡∏Ç‡∏≠‡∏á forecast ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
                return confident_periods[0]

        print(f"No rain/storm detected meeting all criteria.")
        return "NO_RAIN"

    except (requests.exceptions.RequestException, json.JSONDecodeError, KeyError) as e:
        print(f"An error occurred in get_weather_forecast: {e}")
        return None

def format_forecast_message(forecast_object):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE ‡∏à‡∏≤‡∏Å object ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå"""
    weather = forecast_object.get('weather', [{}])[0]
    rain_volume = forecast_object.get('rain', {}).get('3h', 0)
    
    tz_thailand = pytz.timezone('Asia/Bangkok')
    forecast_time_utc = datetime.fromtimestamp(forecast_object['dt'])
    forecast_time_th = forecast_time_utc.astimezone(tz_thailand)

    icon = "‚õàÔ∏è" if str(weather.get('id')).startswith('2') else "üåßÔ∏è"

    message = (f"{icon} *‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ù‡∏ô/‡∏û‡∏≤‡∏¢‡∏∏*\n"
               f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
               f"*‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ‡∏≠.‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ, ‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ*\n\n"
               f"‚ñ∂Ô∏è *‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå:* {weather.get('description', 'N/A')}\n"
               f"üíß *‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ù‡∏ô:* ~{rain_volume:.1f} mm\n"
               f"üóìÔ∏è *‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:* {forecast_time_th.strftime('%H:%M ‡∏ô.')} ({forecast_time_th.strftime('%d/%m')})")
    return message

def send_line_message(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE"""
    if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_TARGET_ID:
        print("LINE credentials are not set. Cannot send message.")
        return

    tz_thailand = pytz.timezone('Asia/Bangkok')
    now_thailand = datetime.now(tz_thailand)
    formatted_datetime = now_thailand.strftime("%d/%m/%Y %H:%M:%S")
    full_message = f"{message}\n\n‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {formatted_datetime}"

    url = 'https://api.line.me/v2/bot/message/push'
    headers = {'Content-Type': 'application/json', 'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'}
    payload = {'to': LINE_TARGET_ID, 'messages': [{'type': 'text', 'text': full_message}]}

    try:
        response = requests.post(url, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        print("LINE message sent successfully!")
    except requests.exceptions.RequestException as e:
        print(f"Error sending LINE message: {e.response.text if e.response else 'No response'}")

def read_last_data(file_path):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read().strip()
    return ''

def write_data(file_path, data):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(data)

def main():
    """‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    last_notified_id = read_last_data(LAST_FORECAST_ID_FILE)
    current_forecast_object = get_weather_forecast()

    if current_forecast_object is None:
        print("Could not retrieve weather forecast. Skipping.")
        return

    current_status_id = ""
    if isinstance(current_forecast_object, dict):
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ù‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 'dt' (timestamp) ‡πÄ‡∏õ‡πá‡∏ô ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        current_status_id = str(current_forecast_object.get('dt', ''))
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ù‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "NO_RAIN") ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô ID
        current_status_id = current_forecast_object

    if current_status_id != last_notified_id:
        print(f"Forecast ID has changed from '{last_notified_id}' to '{current_status_id}'.")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ forecast ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ù‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        if isinstance(current_forecast_object, dict):
            print("New rain event detected. Formatting and sending LINE notification...")
            message_to_send = format_forecast_message(current_forecast_object)
            send_line_message(message_to_send)
        else:
            print("Forecast changed to 'NO_RAIN'. No notification needed, just updating status.")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        write_data(LAST_FORECAST_ID_FILE, current_status_id)
    else:
        print("Forecast status has not changed. No action needed.")


if __name__ == "__main__":
    main()
