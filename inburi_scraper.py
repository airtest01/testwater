import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import pytz
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ---
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.environ.get('LINE_TARGET_ID')
TIMEZONE_THAILAND = pytz.timezone('Asia/Bangkok')

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ---
STATION_URL = "https://singburi.thaiwater.net/wl"
LAST_DATA_FILE = 'last_inburi_data.txt'
STATION_ID_TO_FIND = "C.35"

# --- ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
NOTIFICATION_THRESHOLD_METERS = 0.20

def get_inburi_river_data():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Selenium + BeautifulSoup ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á ID ‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß"""
    print("Setting up Selenium Chrome driver...")
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô headless ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                         "AppleWebKit/537.36 (KHTML, like Gecko) "
                         "Chrome/98.0.4758.102 Safari/537.36")
    options.add_argument("--disable-blink-features=AutomationControlled")

    service = ChromeService(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    driver.set_page_load_timeout(90)

    try:
        print(f"Fetching data from {STATION_URL} ...")
        driver.get(STATION_URL)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ JavaScript ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print("Page loaded. Pausing for 5 seconds to allow JS to render tables...")
        time.sleep(5)

        page_html = driver.page_source
        soup = BeautifulSoup(page_html, 'html.parser')

        # ‡∏´‡∏≤ table ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ô‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        tables = soup.find_all('table')
        if not tables:
            print("No <table> elements found on the page.")
            return None

        target_row = None
        for table in tables:
            for row in table.find_all('tr'):
                cols = row.find_all('td')
                if cols and STATION_ID_TO_FIND in cols[0].get_text():
                    target_row = cols
                    break
            if target_row:
                break

        if not target_row:
            print(f"Could not find station {STATION_ID_TO_FIND} in any table.")
            return None

        station_name = target_row[0].get_text(strip=True)
        # ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á float
        water_level_str = target_row[2].get_text(strip=True).replace(',', '')
        bank_level_str = target_row[3].get_text(strip=True).replace(',', '')

        print(f"Found station: {station_name}")
        print(f"  - Water Level: {water_level_str} m.")
        print(f"  - Bank Level: {bank_level_str} m.")

        water_level = float(water_level_str)
        bank_level = float(bank_level_str)
        overflow = water_level - bank_level

        return {
            "station": station_name,
            "water_level": water_level,
            "bank_level": bank_level,
            "overflow": overflow
        }

    except Exception as e:
        print(f"An error occurred in get_inburi_river_data: {e}")
        return None
    finally:
        print("Closing Selenium driver.")
        driver.quit()

def send_line_message(data, change_amount):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
    now_thailand = datetime.now(TIMEZONE_THAILAND)
    formatted_datetime = now_thailand.strftime("%d/%m/%Y %H:%M ‡∏ô.")
    
    icon = "‚¨ÜÔ∏è" if change_amount > 0 else "‚¨áÔ∏è"
    change_text = f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á {icon} {abs(change_amount):.2f} ‡∏°."
    
    if data['overflow'] > 0:
        status_text, status_icon, overflow_text = "‚ö†Ô∏è *‡∏ô‡πâ‡∏≥‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á*", "üö®", f"{data['overflow']:.2f} ‡∏°."
    else:
        status_text, status_icon, overflow_text = "‚úÖ *‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏Å‡∏ï‡∏¥*", "üåä", f"‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏¥‡πà‡∏á {-data['overflow']:.2f} ‡∏°."

    message = (
        f"{status_icon} *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤*\n"
        f"üìç *‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {data['station']}*\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üíß *‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:* {data['water_level']:.2f} ‡∏°. (‡∏£‡∏ó‡∏Å.)\n"
        f"({change_text})\n"
        f"üèûÔ∏è *‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á:* {data['bank_level']:.2f} ‡∏°. (‡∏£‡∏ó‡∏Å.)\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìä *‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:* {status_text}\n"
        f"({overflow_text})\n\n"
        f"üóìÔ∏è {formatted_datetime}"
    )

    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    payload = {'to': LINE_TARGET_ID, 'messages': [{'type': 'text', 'text': message}]}
    try:
        res = requests.post(url, headers=headers, json=payload, timeout=10)
        res.raise_for_status()
        print("LINE message for In Buri sent successfully!")
    except requests.exceptions.RequestException as e:
        print(f"Error sending LINE message: {e.response.text if e.response else e}")

def read_last_data(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            try:
                return float(f.read().strip())
            except (ValueError, TypeError):
                return None
    return None

def write_data(file_path, data):
    with open(file_path, 'w') as f:
        f.write(str(data))

def main():
    current = get_inburi_river_data()
    if current is None:
        print("Could not retrieve current data. Exiting.")
        return

    last = read_last_data(LAST_DATA_FILE)
    print(f"Current water level: {current['water_level']:.2f} m.")
    print(f"Last recorded level: {last if last is not None else 'N/A'}")

    notify = False
    diff = 0.0
    if last is None:
        print("No last data found. Sending initial notification.")
        notify = True
    else:
        diff = current['water_level'] - last
        if abs(diff) >= NOTIFICATION_THRESHOLD_METERS:
            print(f"Change of {abs(diff):.2f} m meets threshold.")
            notify = True
        else:
            print(f"Change of {abs(diff):.2f} m below threshold. No notify.")

    if notify:
        send_line_message(current, diff)

    print(f"Saving current level ({current['water_level']:.2f}) to {LAST_DATA_FILE}.")
    write_data(LAST_DATA_FILE, current['water_level'])

if __name__ == "__main__":
    main()
